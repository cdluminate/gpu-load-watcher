#!/usr/bin/python3
'''
Blocking CUDA Device Selector

Usage: cusel [-m mem]

Without cusel:

    $ gpustat  # (then manually decide the card to use)
    $ CUDA_VISISBLE_DEVICES=5 python3 train.py

With cusel:

    1. wait for a card with 11000MB idle memory and automatically select it
    $ CUDA_VISIBLE_DEVICES=$(cusel) python3 train.py

    2. wait for a card with 4000MB idle memory and automatically select it
    $ CUDA_VISIBLE_DEVICES=$(cusel -m4000) python3 train.py

Copyright (C) 2020 Mo Zhou <lumin@debian.org>
License: MIT/Expat
'''
from typing import *
import os
import time
import random
import argparse
import re
import fcntl
import subprocess as sp


def __getCards() -> dict:
    '''
    Get a dictionary of GPU status. GPU ID: int -> attributes: dict.
    '''
    gpustat = sp.Popen(['gpustat'], stdout=sp.PIPE, stderr=sp.PIPE
                       ).communicate()[0].decode().strip()
    lines = [line for line in gpustat.split(
        '\n') if re.match(r'^\[\d\]', line)]
    ret = dict()
    for line in lines:
        idx, muse, mall = re.match(
            r'^\[(\d)\].*(\d+)\s+/\s+(\d+) MB', line).groups()
        ret[int(idx)] = (int(muse), int(mall))
    return ret


def __selectCard(cards: dict, mem: int) -> Union[int, None]:
    '''
    Select a card. This function does not block.
    '''
    clist = []
    for (k, (mu, ma)) in cards.items():
        clist.append((k, mu, ma))
    clist = sorted(clist, key=lambda x: x[1])
    for (k, mu, ma) in clist:
        if ma - mu >= mem:
            return k
    return None


if __name__ == '__main__':

    os.putenv('CUDA_DEVICE_ORDER', 'PCI_BUS_ID')

    ag = argparse.ArgumentParser()
    ag.add_argument('-m', type=int, default=11000, help='how much memory (MB)')
    ag.add_argument('-i', type=int, default=15, help='polling interval')
    ag.add_argument('--lock', type=str, default=f'/tmp/cusel.lock')
    ag = ag.parse_args()

    # Acquire lock (concurrent cusel)
    lock = open(ag.lock, 'w+')
    fcntl.lockf(lock, fcntl.LOCK_EX)

    # Polling cards
    while True:
        cards = __getCards()
        sel = __selectCard(cards, ag.m)
        if sel is not None:
            print(sel)
            break
        else:
            time.sleep(ag.i)

    # Release lock (concurrent cusel)
    fcntl.lockf(lock, fcntl.LOCK_UN)
    lock.close()
